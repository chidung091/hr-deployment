name: Deploy to DigitalOcean (Dev and Prod)

on:
  repository_dispatch:
    types: [deploy_dev, deploy_prod]

jobs:
  deploy_dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: dev # Associate the job with the 'dev' environment

    steps:
      - name: Check if the secret exists
        run: |
          if [ -z "${{ secrets.DO_DEV_SSH_PASSWORD }}" ]; then
            echo "DO_DEV_SSH_PASSWORD is not set."
            exit 1
          else
            echo "DO_DEV_SSH_PASSWORD is set."
          fi

      - name: Only run for dev environment
        if: github.event.action == 'deploy_dev'
        run: echo "Deploying to development environment"

      - name: Connect to DigitalOcean via SSH and deploy (Dev)
        if: github.event.action == 'deploy_dev'
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DO_DEV_DROPLET_IP }}
          username: ${{ secrets.DO_DEV_DROPLET_USER }}
          password: ${{ secrets.DO_DEV_SSH_PASSWORD }}
          port: 22
          script: |
            git pull
            cd cm-deployment
            docker system prune -f
            docker compose -f docker-compose.dev.yml pull
            docker compose -f docker-compose.dev.yml up -d

  # deploy_prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   environment: prod # For the production environment secrets

  #   steps:
  #     - name: Only run for prod environment
  #       if: github.event.action == 'deploy_prod'
  #       run: echo "Deploying to production environment"

  #     - name: Connect to DigitalOcean via SSH and deploy (Prod)
  #       if: github.event.action == 'deploy_prod'
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.DO_PROD_DROPLET_IP }} # Make sure the prod secrets are defined
  #         username: ${{ secrets.DO_PROD_DROPLET_USER }}
  #         password: ${{ secrets.DO_PROD_SSH_PASSWORD }}
  #         port: 22
  #         script: |
  #           git pull
  #           cd cm-deployment
  #           docker system prune -f
  #           docker compose -f docker-compose.prod.yml pull
  #           docker compose -f docker-compose.prod.yml up -d
